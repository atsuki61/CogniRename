"""
CogniRename CLI „Ç≥„Éû„É≥„Éâ

Click „Çí‰ΩøÁî®„Åó„Åü„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ „Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅÆÂÆüË£Ö
- register: È°îÁôªÈå≤
- rename: ÂÜôÁúü„É™„Éç„Éº„É†  
- list-persons: ÁôªÈå≤‰∫∫Áâ©‰∏ÄË¶ß
"""

import logging
from pathlib import Path
from typing import Optional

import click
from tqdm import tqdm

from ..core.face_service import FaceService
from ..core.rename_service import RenameService
from ..config import LOG_CONFIG

# „É≠„Ç∞Ë®≠ÂÆö
logging.basicConfig(
    level=getattr(logging, LOG_CONFIG["level"]),
    format=LOG_CONFIG["format"]
)
logger = logging.getLogger(__name__)


@click.group()
@click.version_option()
@click.option('--verbose', '-v', is_flag=True, help='Ë©≥Á¥∞„É≠„Ç∞„ÇíË°®Á§∫')
def main(verbose: bool):
    """CogniRename - È°îË™çË≠ò„Å´„Çà„ÇãÂÜôÁúüËá™Âãï„É™„Éç„Éº„É†„ÉÑ„Éº„É´
    
    200‰∫∫„Éª7000ÊûöË¶èÊ®°„ÅÆÂÜôÁúüÁÆ°ÁêÜ„Å´ÂØæÂøú„Åó„ÅüÈ°îË™çË≠ò„É™„Éç„Éº„É†„ÉÑ„Éº„É´„Åß„Åô„ÄÇ
    """
    if verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("Ë©≥Á¥∞„É≠„Ç∞„É¢„Éº„Éâ„ÇíÊúâÂäπ„Å´„Åó„Åæ„Åó„Åü")


@main.command()
@click.option('--name', '-n', required=True, help='‰∫∫Áâ©Âêç')
@click.option('--image-path', '-i', required=True, type=click.Path(exists=True, path_type=Path), help='È°îÁîªÂÉè„Éï„Ç°„Ç§„É´„Éë„Çπ')
def register(name: str, image_path: Path):
    """È°îÁôªÈå≤ - ÊåáÂÆö„Åï„Çå„ÅüÁîªÂÉè„Åã„ÇâÈ°î„ÇíÁôªÈå≤„Åó„Åæ„Åô
    
    ‰æã: cognirename register --name "Áî∞‰∏≠Â§™ÈÉé" --image-path "./photos/tanaka.jpg"
    """
    click.echo(f"È°îÁôªÈå≤ÈñãÂßã: {name} - {image_path.name}")
    
    try:
        face_service = FaceService()
        success = face_service.register_face_from_image(image_path, name)
        
        if success:
            click.echo(f"‚úÖ È°îÁôªÈå≤ÂÆå‰∫Ü: {name}")
            
            # Áµ±Ë®àË°®Á§∫
            stats = face_service.get_recognition_stats()
            click.echo(f"   ÁôªÈå≤‰∫∫Êï∞: {stats['person_count']}‰∫∫")
            click.echo(f"   È°îÁâπÂæ¥Èáè: {stats['encoding_count']}‰ª∂")
        else:
            click.echo(f"‚ùå È°îÁôªÈå≤Â§±Êïó: {name}")
            
    except ValueError as e:
        click.echo(f"‚ùå „Ç®„É©„Éº: {str(e)}", err=True)
        raise click.Abort()
    except Exception as e:
        logger.error(f"‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº: {str(e)}")
        click.echo(f"‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {str(e)}", err=True)
        raise click.Abort()


@main.command()
@click.option('--input-folder', '-i', required=True, type=click.Path(exists=True, file_okay=False, path_type=Path), help='ÂÖ•Âäõ„Éï„Ç©„É´„ÉÄ„Éë„Çπ')
@click.option('--recursive', '-r', is_flag=True, help='„Çµ„Éñ„Éï„Ç©„É´„ÉÄ„ÇÇÂá¶ÁêÜ')
@click.option('--dry-run', '-d', is_flag=True, help='ÂÆüÈöõ„ÅÆ„É™„Éç„Éº„É†„ÇíË°å„Çè„Åö„Éó„É¨„Éì„É•„Éº„ÅÆ„Åø')
def rename(input_folder: Path, recursive: bool, dry_run: bool):
    """ÂÜôÁúü„É™„Éç„Éº„É† - „Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆÂÜôÁúü„ÇíÈ°îË™çË≠ò„Åß„É™„Éç„Éº„É†„Åó„Åæ„Åô
    
    ‰æã: cognirename rename --input-folder "./photos" --recursive --dry-run
    """
    click.echo(f"„É™„Éç„Éº„É†Âá¶ÁêÜÈñãÂßã: {input_folder}")
    click.echo(f"  „Çµ„Éñ„Éï„Ç©„É´„ÉÄÂá¶ÁêÜ: {'ÊúâÂäπ' if recursive else 'ÁÑ°Âäπ'}")
    click.echo(f"  „É¢„Éº„Éâ: {'„Éâ„É©„Ç§„É©„É≥' if dry_run else 'ÂÆüË°å'}")
    
    try:
        rename_service = RenameService()
        
        # ÁîªÂÉè„Éï„Ç°„Ç§„É´Ê§úÁ¥¢
        image_files = rename_service.find_image_files(input_folder, recursive)
        
        if not image_files:
            click.echo("‚ö†Ô∏è  Âá¶ÁêÜÂØæË±°„ÅÆÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            return
        
        click.echo(f"ÂØæË±°„Éï„Ç°„Ç§„É´: {len(image_files)}‰ª∂")
        
        # ÈÄ≤ÊçóË°®Á§∫Áî®„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
        progress_bar = None
        def progress_callback(processed: int, total: int):
            nonlocal progress_bar
            if progress_bar is None:
                progress_bar = tqdm(total=total, desc="Âá¶ÁêÜ‰∏≠", unit="files")
            progress_bar.update(1)
        
        # „É™„Éç„Éº„É†ÂÆüË°å
        result = rename_service.rename_batch(image_files, dry_run, progress_callback)
        
        if progress_bar:
            progress_bar.close()
        
        # ÁµêÊûúË°®Á§∫
        click.echo(f"\nüìä Âá¶ÁêÜÁµêÊûú:")
        click.echo(f"  Á∑è„Éï„Ç°„Ç§„É´Êï∞: {result['total_files']}")
        click.echo(f"  ÊàêÂäü: {result['successful']}")
        click.echo(f"  Â§±Êïó: {result['failed']}")
        click.echo(f"  È°îË™çË≠ò„Å™„Åó: {result['no_faces']}")
        click.echo(f"  Âá¶ÁêÜÊôÇÈñì: {result['total_time']:.1f}Áßí")
        click.echo(f"  Âπ≥ÂùáÊôÇÈñì/„Éï„Ç°„Ç§„É´: {result['avg_time_per_file']:.2f}Áßí")
        
        if dry_run and result['successful'] > 0:
            click.echo(f"\nüí° --dry-run „ÇíÂ§ñ„Åó„Å¶ÂÆüÈöõ„ÅÆ„É™„Éç„Éº„É†„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
    except Exception as e:
        logger.error(f"„É™„Éç„Éº„É†Âá¶ÁêÜ„Ç®„É©„Éº: {str(e)}")
        click.echo(f"‚ùå „Ç®„É©„Éº: {str(e)}", err=True)
        raise click.Abort()


@main.command('list-persons')
def list_persons():
    """ÁôªÈå≤‰∫∫Áâ©‰∏ÄË¶ß - ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã‰∫∫Áâ©„ÅÆ‰∏ÄË¶ß„ÇíË°®Á§∫„Åó„Åæ„Åô"""
    try:
        face_service = FaceService()
        persons = face_service.db.get_all_persons()
        
        if not persons:
            click.echo("ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã‰∫∫Áâ©„ÅØ„ÅÑ„Åæ„Åõ„Çì")
            return
        
        click.echo(f"üìã ÁôªÈå≤‰∫∫Áâ©‰∏ÄË¶ß ({len(persons)}‰∫∫):")
        for person_id, name in persons:
            # ÂêÑ‰∫∫Áâ©„ÅÆÈ°îÁâπÂæ¥ÈáèÊï∞„ÇíÂèñÂæó
            encodings = face_service.db.get_face_encodings_by_person(person_id)
            click.echo(f"  {person_id:3d}: {name} ({len(encodings)}‰ª∂„ÅÆÈ°î„Éá„Éº„Çø)")
        
        # Áµ±Ë®àÊÉÖÂ†±
        stats = face_service.get_recognition_stats()
        click.echo(f"\nüìä „Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®à:")
        click.echo(f"  ‰∫∫Áâ©Êï∞: {stats['person_count']}")
        click.echo(f"  È°îÁâπÂæ¥Èáè: {stats['encoding_count']}")
        click.echo(f"  Âπ≥ÂùáÁâπÂæ¥Èáè/‰∫∫: {stats['avg_encodings_per_person']}")
        click.echo(f"  DB „Çµ„Ç§„Ç∫: {stats['db_size_mb']}MB")
        
    except Exception as e:
        logger.error(f"‰∫∫Áâ©‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº: {str(e)}")
        click.echo(f"‚ùå „Ç®„É©„Éº: {str(e)}", err=True)
        raise click.Abort()


@main.command()
@click.option('--input-folder', '-i', required=True, type=click.Path(exists=True, file_okay=False, path_type=Path), help='ÂÖ•Âäõ„Éï„Ç©„É´„ÉÄ„Éë„Çπ')
@click.option('--recursive', '-r', is_flag=True, help='„Çµ„Éñ„Éï„Ç©„É´„ÉÄ„ÇÇÂá¶ÁêÜ')
@click.option('--max-preview', '-m', default=10, help='„Éó„É¨„Éì„É•„Éº‰ª∂Êï∞‰∏äÈôê')
def preview(input_folder: Path, recursive: bool, max_preview: int):
    """„É™„Éç„Éº„É†„Éó„É¨„Éì„É•„Éº - ÂÆüÈöõ„ÅÆ„É™„Éç„Éº„É†„ÇíË°å„Çè„Åö„Å´ÁµêÊûú„Çí„Éó„É¨„Éì„É•„ÉºË°®Á§∫„Åó„Åæ„Åô"""
    click.echo(f"„Éó„É¨„Éì„É•„ÉºË°®Á§∫: {input_folder}")
    
    try:
        rename_service = RenameService()
        image_files = rename_service.find_image_files(input_folder, recursive)
        
        if not image_files:
            click.echo("‚ö†Ô∏è  Âá¶ÁêÜÂØæË±°„ÅÆÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            return
        
        click.echo(f"ÂØæË±°„Éï„Ç°„Ç§„É´: {len(image_files)}‰ª∂ („Éó„É¨„Éì„É•„Éº: {min(max_preview, len(image_files))}‰ª∂)")
        
        previews = rename_service.get_rename_preview(image_files, max_preview)
        
        click.echo(f"\nüìã „É™„Éç„Éº„É†„Éó„É¨„Éì„É•„Éº:")
        for i, preview in enumerate(previews, 1):
            if preview.get('error'):
                click.echo(f"  {i:2d}: ‚ùå {preview['original_name']} - {preview['error']}")
            elif preview['has_faces']:
                names = ', '.join(preview['identified_names'])
                click.echo(f"  {i:2d}: ‚úÖ {preview['original_name']} ‚Üí {preview['new_name']} ({names})")
            else:
                click.echo(f"  {i:2d}: ‚ö†Ô∏è  {preview['original_name']} - È°î„ÇíË™çË≠ò„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")
        
        if len(image_files) > max_preview:
            click.echo(f"\n... ‰ªñ {len(image_files) - max_preview} ‰ª∂")
        
    except Exception as e:
        logger.error(f"„Éó„É¨„Éì„É•„Éº„Ç®„É©„Éº: {str(e)}")
        click.echo(f"‚ùå „Ç®„É©„Éº: {str(e)}", err=True)
        raise click.Abort()


if __name__ == '__main__':
    main() 