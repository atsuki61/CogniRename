---
description: 
globs: 
alwaysApply: true
---
---
# ルール設定（フロントマター）
# リポジトリ全体に適用する Cursor 用テンプレート
# globs はデフォルトで全ファイルを対象とする
# --------------------------------------------------
# description : テンプレートの説明
# globs       : 適用対象ファイル（ワイルドカード可）
# alwaysApply : true で常時適用
# --------------------------------------------------
description: Apply this rule to the entire repository
globs:
  - "**/*"
alwaysApply: true
---

<!-- テンプレート本文ここから（機能単位コメント付き） -->

<!-- 指示確認セクション：ユーザー入力を {{instructions}} へ差し込み -->
まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

<!-- 1. 指示の分析と計画：タスクを詳細に分解し、実行計画を立てる -->
---

## 1. 指示の分析と計画
<タスク分析>
- **主要タスク要約**：主要なタスクを簡潔に列挙します。
- **技術スタック確認**：記載されたバージョンを変更せず実装方法を検討します。  
  ※変更が必要な場合は必ず事前承認を得ること。
- **重要要件と制約の特定**:
- **潜在的課題の洗い出し**
- **具体的ステップの列挙**
- **最適な実行順序の決定**

### 重複実装の防止
- 既存類似機能・同名関数／コンポーネント・重複 API の有無を確認。
- 共通化可能な処理を特定し、二重実装を避けます。

</タスク分析>

<!-- 2. タスク実行：計画に沿って各ステップを実施し進捗を報告 -->
---

## 2. タスクの実行
- 特定したステップを順次実行し、各完了後に簡潔な進捗報告を行います。
- 実装時の注意点：
  - 適切なディレクトリ構造の遵守
  - 命名規則の一貫性
  - 共通処理の適切配置

<!-- 3. 品質管理：検証・デバッグ・問題対応フロー -->
---

## 3. 品質管理と問題対応
1. **迅速な検証**：各タスク完了時に即座に検証を実施。
2. **エラー対応プロセス**：
   a. 問題切り分けと原因特定  
   b. 対策案の作成と実施  
   c. 修正後の動作検証  
   d. デバッグログ確認
3. **検証結果の記録フォーマット**：
   - 検証項目／期待結果
   - 実際結果／差異
   - 対応策

<!-- 4. 最終確認：成果物と要件の整合性チェック -->
---

## 4. 最終確認
- 全タスク完了後、成果物を評価し当初指示との整合性を確認。
- 実装機能に重複がないかを最終点検します。

<!-- 5. 結果報告：Markdown 形式で最終結果をまとめる -->
---

## 5. 結果報告フォーマット
```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## 課題対応（該当する場合）
- 発生した問題と対応内容
- 今後の注意点

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```

<!-- 重要注意事項：変更禁止事項などを明文化 -->
---

## 重要な注意事項
- 不明点がある場合は **作業開始前に必ず確認** してください。
- 重要な判断が必要な場合は随時報告し、承認を得てください。
- 予期せぬ問題が発生した場合は即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないこと**。必要変更は提案→承認→実施のフローを徹底。
- **UI/UX デザインの変更は禁止**。必要な場合は理由を示し承認を得てください。
- **技術スタックのバージョンを勝手に変更しない**。変更が必要な場合は理由を明確にした上で承認を取得してください。

<!-- ディレクトリ構成：外部ファイル読み込みを維持 -->
---

# ディレクトリ構成

[directorystructure.md](mdc:directorystructure.md)

構成に変更があった場合は、編集を行うこと。（削除、追加など）

---
# 技術選定・性能目標・セキュリティ考慮

[technologystack.md](mdc:technologystack.md)

<!-- CogniRename 要件定義：写真リネーム処理の全体仕様を固定セクションとして追加 -->
---

## CogniRename 要件定義

### 1. プロジェクト概要
- **プロジェクト名**: CogniRename (コグニリネーム)
- **利用目的**: 大量の写真を顔認識で自動リネームし、整理を効率化（個人利用）

### 2. 対応フォーマット・入力
- **対応ファイル形式**: JPEG / PNG / WebP / JFIF ほか Pillow で扱える一般画像
- **入力方法**  
  - *GUI*: ファイル選択ダイアログ／ドラッグ＆ドロップ  
  - *CUI*: コマンドライン引数でフォルダ指定
- **サブフォルダ処理**  
  - *GUI*: トグルスイッチ  
  - *CUI*: `--recursive` オプション
- **想定処理規模**: 大量写真（多数ファイル）

### 3. 顔データ管理
| テーブル | カラム | 型 | 説明 |
|-----------|--------|----|-----|
| persons | id | INTEGER PK | 人物 ID |
| | name | TEXT UNIQUE | 人物名 |
| face_encodings | id | INTEGER PK | エンコーディング ID |
| | person_id | INTEGER FK | persons.id への外部キー |
| | encoding | BLOB | 顔特徴量データ |

### 4. 顔認識処理
- 1 枚の写真に複数顔→既知人物最大 3 名をファイル名に含める。
- 未登録／認識不可の顔は無視。
- **ライブラリ**: `face_recognition` 等

### 5. リネーム処理
- **命名規則**: `名前1_名前2_名前3.拡張子`（区切り `_`）
- **重複時**: `ファイル名(1).拡張子` 形式で連番付与
- **未認識写真**  
  - *GUI*: 手動タグ付け UI  
  - *CUI*: スキップ or 手入力プロンプト

### 6. ユーザーインターフェース
- **CUI**: `click` ライブラリ  
  - `cognirename register --name <NAME> --image-path <IMG>`  
  - `cognirename rename --input-folder <DIR> [--recursive]`  
  - `cognirename list-persons`
- **GUI**: `Streamlit`  
  - サイドバー：DB パス／顔登録／リネーム設定  
  - メイン：タブ形式（顔登録・写真リネーム）

### 7. 表示機能 (GUI)
- プログレスバーで進捗表示
- 認識結果の確認・修正画面：顔領域＋推測名を表示、名前修正・新規登録可

### 8. 使用言語・ライブラリ
- **言語**: Python
- **主要ライブラリ**: click, Streamlit, sqlite3, Pillow, face_recognition

### 9. 将来的な拡張案
- 命名規則のカスタマイズ、ドライラン、人物管理 UI、パフォーマンス最適化 など

